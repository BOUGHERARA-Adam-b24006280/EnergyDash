===== index.php =====
<?php
// Démarrage de la session
session_start();


// BASE_URL : préfixe d'URL du projet

define('BASE_URL', dirname($_SERVER['SCRIPT_NAME']) !== '/' ? rtrim(dirname($_SERVER['SCRIPT_NAME']), '/') : '');

// Chargement des configurations
require_once __DIR__ . '/config/database.php';
$routes = require_once __DIR__ . '/config/routes.php';

// Récupération du chemin demandé
$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

// Enlever le préfixe BASE_URL si présent (ex: "/EnergyDash")
if (BASE_URL !== '' && strpos($path, BASE_URL) === 0) {
    $path = substr($path, strlen(BASE_URL));
}

// Normaliser (retirer les / de début et fin)
$path = trim($path, '/');
$method = $_SERVER['REQUEST_METHOD'];

// Routage
foreach ($routes as $route => $controllerAction) {
    if ($path === $route) {
        [$controllerName, $action] = $controllerAction;

        // Chargement du contrôleur
        require_once __DIR__ . '/controllers/' . $controllerName . '.php';
        $controller = new $controllerName($pdo);

        // Appel de la méthode
        if (method_exists($controller, $action)) {
            $controller->$action();
            exit;
        }
    }
}

// Route non trouvée
http_response_code(404);
require_once __DIR__ . '/views/errors/404.php';

===== config/database.php =====
<?php
$host = 'localhost';
$dbname = 'energy_dash';
$username = 'root'; 
$password = '';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Erreur de connexion : " . $e->getMessage());
}
?>

===== config/mail.php =====
<?php
// Configuration SMTP pour l'envoi des emails via PHPMailer

return [
    'host' => 'smtp.alwaysdata.com',          // hôte SMTP (ex : smtp.gmail.com, smtp.mailtrap.io, etc.)
    'username' => 'ton_email@alwaysdata.net', // ton adresse email d'envoi
    'password' => 'ton_mot_de_passe_smtp',    // ton mot de passe SMTP
    'port' => 587,                            // 587 pour TLS, 465 pour SSL
    'from_email' => 'noreply@energydash.fr',  // adresse d’expéditeur affichée dans le mail
    'from_name' => 'EnergyDash'               // nom affiché comme expéditeur
];

===== config/routes.php =====
<?php
return [
    // Format : 'chemin' => ['Contrôleur', 'méthode']
    '' => ['HomeController', 'index'],          // Page d'accueil (/)
    'login' => ['AuthController', 'login'],      // /login
    'register' => ['AuthController', 'register'], // /register*
    'dashboard' => ['HomeController', 'dashboard'], // /dashboard
    'logout' => ['HomeController', 'logout'],
    'mentions-legales' => ['HomeController', 'mentionsLegales'],
    'forgot-password' => ['AuthController', 'forgotPassword'],
    'reset-password'  => ['AuthController', 'resetPassword'],
];
?>
===== controllers/AuthController.php =====
<?php
require_once __DIR__ . '/../models/UserModel.php';
require_once __DIR__ . '/../vendor/autoload.php'; // pour charger PHPMailer avec Composer
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

class AuthController {
    private $pdo;
    private $userModel;

    public function __construct($pdo) {
        $this->pdo = $pdo;
        $this->userModel = new UserModel($pdo);
    }

    // Afficher / traiter le formulaire de connexion
    public function login() {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = $_POST['email'] ?? '';
            $password = $_POST['password'] ?? '';

            if (empty($email) || empty($password)) {
                $error = "Tous les champs doivent être remplis.";
            } else {
                $user = $this->userModel->login($email, $password);
                if ($user) {
                    $_SESSION['user'] = [
                        'id' => $user['id'],
                        'email' => $user['email'],
                    ];
                    header('Location: ' . BASE_URL . '/dashboard');
                    exit;
                } else {
                    $error = "Email ou mot de passe incorrect.";
                }
            }
        }

        $title = "Connexion";
        include __DIR__ . '/../views/auth/login.php';
    }

    // Afficher / traiter le formulaire d'inscription
    public function register() {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = $_POST['email'] ?? '';
            $password = $_POST['password'] ?? '';
            $confirm_password = $_POST['confirm_password'] ?? '';
            $first_name = $_POST['first_name'] ?? '';
            $last_name = $_POST['last_name'] ?? '';

            // Vérification des champs vides
            if (empty($email) || empty($password) || empty($confirm_password) || empty($first_name) || empty($last_name)) {
                $error = "Tous les champs doivent être remplis.";

            } 
            // Vérification du format d'email
            elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $error = "L'adresse e-mail est invalide. Exemple : nom@domaine.com";
            }
            // Vérification de la compléxité du mot de passe (OWASP)
            elseif (!$this->isPasswordStrong($password)) {
                $error = "Le mot de passe doit contenir au minimum 8 caractères, une majuscule, une minuscule, un chiffre et un symbol spécial";
            }
            // Vérification de la correspondance des mots de passe
            elseif ($password !== $confirm_password) {
                $error = "Les mots de passe ne correspondent pas.";
            }
            // Vérification de l'unicité de l'email
            elseif ($this->userModel->emailExists($email)) {
                $error = "L'email est déjà utilisé.";
            } 
            // Tout est OK -> enregistrement
            else {
                if ($this->userModel->register($first_name, $last_name, $email, $password)) {
                    header('Location: ' . BASE_URL . '/login');
                    exit;
                } else {
                    $error = "Erreur lors de l'inscription.";
                }
            }
        }

        $title = "Inscription";
        include __DIR__ . '/../views/auth/register.php';
    }

    public function logout() {
        session_destroy();
        header('Location: ' . BASE_URL . '/login');
        exit;
    }

    // Fonction mot de passe oublié
    private function isPasswordStrong($password) {
        if (strlen($password) < 8) {
            return false;
        }

        // Au moins une majuscule
        if (!preg_match('/[A-Z]/', $password)) {
            return false;
        }

        // Au moins une minuscule
        if (!preg_match('/[a-z]/', $password)) {
            return false;
        }

        // Au moins un chiffre
        if (!preg_match('/[0-9]/', $password)) {
            return false;
        }

        // Au moins un caractère spécial
        if (!preg_match('/[\W_]/', $password)) { // \W = tout sauf lettre/chiffre
            return false;
        }

        return true;
    }

    public function forgotPassword() {
        if (session_status() === PHP_SESSION_NONE) session_start();

        $error = $success = null;

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = trim($_POST['email'] ?? '');

            if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $error = "Veuillez saisir une adresse e-mail valide.";
            } else {
                // Cherche l'utilisateur
                $stmt = $this->pdo->prepare("SELECT id FROM users WHERE email = ? LIMIT 1");
                $stmt->execute([$email]);
                $user = $stmt->fetch(PDO::FETCH_ASSOC);

                // Message neutre (évite de révéler si l'email existe)
                $success = "Si cet e-mail est enregistré, vous allez recevoir un lien de réinitialisation.";

                if ($user) {
                    // Génère token fort
                    $token = bin2hex(random_bytes(32));

                    // Store token via UserModel (ou PDO direct)
                    $userModel = $this->userModel ?? new UserModel($this->pdo);
                    $userModel->storeResetToken((int)$user['id'], $token);

                    // Génère le lien complet
                    $host = $_SERVER['HTTP_HOST'];
                    $scheme = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';
                    $resetLink = "{$scheme}://{$host}" . BASE_URL . "/reset-password?token=" . urlencode($token);

                    // Charge la config SMTP
                    $mailConfig = require __DIR__ . '/../config/mail.php';

                    $mail = new PHPMailer(true);
                    try {
                        $mail->isSMTP();
                        $mail->Host       = $mailConfig['host'];
                        $mail->SMTPAuth   = true;
                        $mail->Username   = $mailConfig['username'];
                        $mail->Password   = $mailConfig['password'];
                        $mail->SMTPSecure = 'tls'; // ou 'ssl' selon ton fournisseur
                        $mail->Port       = $mailConfig['port'];

                        $mail->setFrom($mailConfig['from_email'], $mailConfig['from_name']);
                        $mail->addAddress($email);

                        $mail->isHTML(true);
                        $mail->Subject = 'Réinitialisation de votre mot de passe - EnergyDash';
                        $mail->Body = "
                            <p>Bonjour,</p>
                            <p>Vous avez demandé la réinitialisation de votre mot de passe EnergyDash.</p>
                            <p>Cliquez sur le lien ci-dessous pour définir un nouveau mot de passe :</p>
                            <p><a href='{$resetLink}'>Réinitialiser mon mot de passe</a></p>
                            <p>Ce lien expirera dans 30 minutes.</p>
                            <p>Si vous n'êtes pas à l'origine de cette demande, ignorez simplement ce message.</p>
                            <p><em>L'équipe EnergyDash</em></p>
                        ";

                        $mail->send();
                        $success = "Si cet e-mail est enregistré, vous allez recevoir un lien de réinitialisation.";
                    } catch (Exception $e) {
                        // Ne pas afficher les détails d’erreur à l’utilisateur (pour la sécurité)
                        error_log("Erreur envoi mail : " . $mail->ErrorInfo);
                        $success = "Si cet e-mail est enregistré, vous allez recevoir un lien de réinitialisation.";
                    }

                }
            }
        }

        $title = "Mot de passe oublié";
        $body = __DIR__ . '/../views/auth/forgot_password.php';
        $navbar = __DIR__ . '/../views/shared/navbar.php';
        $footer = __DIR__ . '/../views/shared/footer.php';
        include __DIR__ . '/../views/shared/layout.php';
    }

    public function resetPassword() {
        if (session_status() === PHP_SESSION_NONE) session_start();

        $error = $success = null;
        $token = $_GET['token'] ?? $_POST['token'] ?? '';

        // si POST -> essayer d'appliquer le changement
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $password = $_POST['password'] ?? '';
            $confirm  = $_POST['confirm_password'] ?? '';

            if (empty($token)) {
                $error = "Lien invalide.";
            } elseif ($password !== $confirm) {
                $error = "Les mots de passe ne correspondent pas.";
            } elseif (!$this->isPasswordStrong($password)) {
                $error = "Mot de passe trop faible (8+, maj, min, chiffre, symbole).";
            } else {
                $userModel = $this->userModel ?? new UserModel($this->pdo);
                $reset = $userModel->findResetByToken($token, 30); // 30 minutes validade

                if (!$reset) {
                    $error = "Lien de réinitialisation invalide ou expiré.";
                } else {
                    // update
                    $hashed = password_hash($password, PASSWORD_DEFAULT);
                    $userModel->updatePassword((int)$reset['user_id'], $hashed);
                    $userModel->deleteResetTokens((int)$reset['user_id']);

                    // flash + redirect to login
                    $_SESSION['flash'] = "Votre mot de passe a été réinitialisé avec succès.";
                    header('Location: ' . BASE_URL . '/login');
                    exit;
                }
            }
        } else {
            // GET : vérifier rapidement token (optionnel)
            if (!empty($token)) {
                $userModel = $this->userModel ?? new UserModel($this->pdo);
                $reset = $userModel->findResetByToken($token, 30);
                if (!$reset) {
                    $error = "Lien de réinitialisation invalide ou expiré.";
                }
            }
        }

        $title = "Réinitialisation du mot de passe";
        $body = __DIR__ . '/../views/auth/reset_password.php';
        $navbar = __DIR__ . '/../views/shared/navbar.php';
        $footer = __DIR__ . '/../views/shared/footer.php';
        include __DIR__ . '/../views/shared/layout.php';
    }

}

===== controllers/HomeController.php =====
<?php
class HomeController {
    public function index() {
        $title = "Accueil";
        $body = __DIR__ . '/../views/home/index.php';
        $navbar = __DIR__ . '/../views/shared/navbar.php';
        $footer = __DIR__ . '/../views/shared/footer.php';
        include __DIR__ . '/../views/shared/layout.php';
    }

    public function dashboard() {

        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
        
        if (!isset($_SESSION['user'])) {
            header('Location: ' . BASE_URL . '/login');
            exit;
        }
        
        $title = "Tableau de bord";
        include __DIR__ . '/../views/dashboard/dashboard.php';
    }

    public function logout() {
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }

        $_SESSION = [];

        session_destroy();

        header('Location: ' . BASE_URL . '/login');
        exit;
    }

    public function mentionsLegales() {
        $title  = "Mentions légales";
        $body   = __DIR__ . '/../views/legal/mentions.php';
        $navbar = __DIR__ . '/../views/shared/navbar.php';
        $footer = __DIR__ . '/../views/shared/footer.php';
        include __DIR__ . '/../views/shared/layout.php';
    }

}
?>

===== models/UserModel.php =====
<?php
class UserModel {
    private $pdo;

    public function __construct($pdo) {
        $this->pdo = $pdo;
    }

        // Vérifier si un email existe déjà
    public function emailExists($email) {
        $sql = "SELECT COUNT(*) FROM users WHERE email = ? LIMIT 1";
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute([$email]);
        return $stmt->fetchColumn() > 0;
    }
        // Enregiste un nouvel utilisateur
    public function register($first_name,$last_name, $email, $password) {
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        $sql = "INSERT INTO users (first_name, last_name, email, password) VALUES (?, ?, ?, ?)";
        $stmt = $this->pdo->prepare($sql);
        return $stmt->execute([$first_name, $last_name, $email, $hashedPassword]);
    }

    public function login($email, $password) {
        $sql = "SELECT * FROM users WHERE email = ? LIMIT 1";
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute([$email]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($user && password_verify($password, $user['password'])) {
            return $user;
        }
        return false;
    }

        // Stocke un token pour l'utilisateur (supprime d'abord les anciens)
    public function storeResetToken(int $userId, string $token): bool {
        $stmt = $this->pdo->prepare("DELETE FROM password_resets WHERE user_id = ?");
        $stmt->execute([$userId]);

        $tokenHash = hash_hmac('sha256', $token, 'ENERGYDASH_SECRET'); // choisis une clé secrète
        $stmt = $this->pdo->prepare(
            "INSERT INTO password_resets (user_id, token, created_at) VALUES (?, ?, NOW())"
        );
        return $stmt->execute([$userId, $tokenHash]);
    }


        // Récupère la ligne password_resets si token valide
    public function findResetByToken(string $token, int $minutesValid = 30) {
        $tokenHash = hash_hmac('sha256', $token, 'ENERGYDASH_SECRET');
        $stmt = $this->pdo->prepare(
            "SELECT pr.*, u.email FROM password_resets pr
            JOIN users u ON u.id = pr.user_id
            WHERE pr.token = ? AND pr.created_at >= (NOW() - INTERVAL ? MINUTE) LIMIT 1"
        );
        $stmt->execute([$tokenHash, $minutesValid]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }


        // Supprime les tokens d'un utilisateur
    public function deleteResetTokens(int $userId): bool {
        $stmt = $this->pdo->prepare("DELETE FROM password_resets WHERE user_id = ?");
        return $stmt->execute([$userId]);
    }

        // Met à jour le mot de passe d'un user
    public function updatePassword(int $userId, string $hashedPassword): bool {
        $stmt = $this->pdo->prepare("UPDATE users SET password = ? WHERE id = ?");
        return $stmt->execute([$hashedPassword, $userId]);
    }

}
?>

===== vendor/autoload.php =====
<?php

// autoload.php @generated by Composer

if (PHP_VERSION_ID < 50600) {
    if (!headers_sent()) {
        header('HTTP/1.1 500 Internal Server Error');
    }
    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via "composer self-update --2.2". Aborting.'.PHP_EOL;
    if (!ini_get('display_errors')) {
        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
            fwrite(STDERR, $err);
        } elseif (!headers_sent()) {
            echo $err;
        }
    }
    trigger_error(
        $err,
        E_USER_ERROR
    );
}

require_once __DIR__ . '/composer/autoload_real.php';

return ComposerAutoloaderInit2185d2f99bcd56787481d9357a5972d3::getLoader();

===== views/dashboard.php =====

===== vendor/composer/autoload_classmap.php =====
<?php

// autoload_classmap.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
    'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
);

===== vendor/composer/autoload_namespaces.php =====
<?php

// autoload_namespaces.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
);

===== vendor/composer/autoload_psr4.php =====
<?php

// autoload_psr4.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
    'PHPMailer\\PHPMailer\\' => array($vendorDir . '/phpmailer/phpmailer/src'),
);

===== vendor/composer/autoload_real.php =====
<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit2185d2f99bcd56787481d9357a5972d3
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        require __DIR__ . '/platform_check.php';

        spl_autoload_register(array('ComposerAutoloaderInit2185d2f99bcd56787481d9357a5972d3', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
        spl_autoload_unregister(array('ComposerAutoloaderInit2185d2f99bcd56787481d9357a5972d3', 'loadClassLoader'));

        require __DIR__ . '/autoload_static.php';
        call_user_func(\Composer\Autoload\ComposerStaticInit2185d2f99bcd56787481d9357a5972d3::getInitializer($loader));

        $loader->register(true);

        return $loader;
    }
}

===== vendor/composer/autoload_static.php =====
<?php

// autoload_static.php @generated by Composer

namespace Composer\Autoload;

class ComposerStaticInit2185d2f99bcd56787481d9357a5972d3
{
    public static $prefixLengthsPsr4 = array (
        'P' => 
        array (
            'PHPMailer\\PHPMailer\\' => 20,
        ),
    );

    public static $prefixDirsPsr4 = array (
        'PHPMailer\\PHPMailer\\' => 
        array (
            0 => __DIR__ . '/..' . '/phpmailer/phpmailer/src',
        ),
    );

    public static $classMap = array (
        'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
    );

    public static function getInitializer(ClassLoader $loader)
    {
        return \Closure::bind(function () use ($loader) {
            $loader->prefixLengthsPsr4 = ComposerStaticInit2185d2f99bcd56787481d9357a5972d3::$prefixLengthsPsr4;
            $loader->prefixDirsPsr4 = ComposerStaticInit2185d2f99bcd56787481d9357a5972d3::$prefixDirsPsr4;
            $loader->classMap = ComposerStaticInit2185d2f99bcd56787481d9357a5972d3::$classMap;

        }, null, ClassLoader::class);
    }
}

===== vendor/composer/ClassLoader.php =====
<?php

/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann <naderman@naderman.de>
 *     Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Composer\Autoload;

/**
 * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
 *
 *     $loader = new \Composer\Autoload\ClassLoader();
 *
 *     // register classes with namespaces
 *     $loader->add('Symfony\Component', __DIR__.'/component');
 *     $loader->add('Symfony',           __DIR__.'/framework');
 *
 *     // activate the autoloader
 *     $loader->register();
 *
 *     // to enable searching the include path (eg. for PEAR packages)
 *     $loader->setUseIncludePath(true);
 *
 * In this example, if you try to use a class in the Symfony\Component
 * namespace or one of its children (Symfony\Component\Console for instance),
 * the autoloader will first look for the class under the component/
 * directory, and it will then fallback to the framework/ directory if not
 * found before giving up.
 *
 * This class is loosely based on the Symfony UniversalClassLoader.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @see    https://www.php-fig.org/psr/psr-0/
 * @see    https://www.php-fig.org/psr/psr-4/
 */
class ClassLoader
{
    /** @var \Closure(string):void */
    private static $includeFile;

    /** @var string|null */
    private $vendorDir;

    // PSR-4
    /**
     * @var array<string, array<string, int>>
     */
    private $prefixLengthsPsr4 = array();
    /**
     * @var array<string, list<string>>
     */
    private $prefixDirsPsr4 = array();
    /**
     * @var list<string>
     */
    private $fallbackDirsPsr4 = array();

    // PSR-0
    /**
     * List of PSR-0 prefixes
     *
     * Structured as array('F (first letter)' => array('Foo\Bar (full prefix)' => array('path', 'path2')))
     *
     * @var array<string, array<string, list<string>>>
     */
    private $prefixesPsr0 = array();
    /**
     * @var list<string>
     */
    private $fallbackDirsPsr0 = array();

    /** @var bool */
    private $useIncludePath = false;

    /**
     * @var array<string, string>
     */
    private $classMap = array();

    /** @var bool */
    private $classMapAuthoritative = false;

    /**
     * @var array<string, bool>
     */
    private $missingClasses = array();

    /** @var string|null */
    private $apcuPrefix;

    /**
     * @var array<string, self>
     */
    private static $registeredLoaders = array();

    /**
     * @param string|null $vendorDir
     */
    public function __construct($vendorDir = null)
    {
        $this->vendorDir = $vendorDir;
        self::initializeIncludeClosure();
    }

    /**
     * @return array<string, list<string>>
     */
    public function getPrefixes()
    {
        if (!empty($this->prefixesPsr0)) {
            return call_user_func_array('array_merge', array_values($this->prefixesPsr0));
        }

        return array();
    }

    /**
     * @return array<string, list<string>>
     */
    public function getPrefixesPsr4()
    {
        return $this->prefixDirsPsr4;
    }

    /**
     * @return list<string>
     */
    public function getFallbackDirs()
    {
        return $this->fallbackDirsPsr0;
    }

    /**
     * @return list<string>
     */
    public function getFallbackDirsPsr4()
    {
        return $this->fallbackDirsPsr4;
    }

    /**
     * @return array<string, string> Array of classname => path
     */
    public function getClassMap()
    {
        return $this->classMap;
    }

    /**
     * @param array<string, string> $classMap Class to filename map
     *
     * @return void
     */
    public function addClassMap(array $classMap)
    {
        if ($this->classMap) {
            $this->classMap = array_merge($this->classMap, $classMap);
        } else {
            $this->classMap = $classMap;
        }
    }

    /**
     * Registers a set of PSR-0 directories for a given prefix, either
     * appending or prepending to the ones previously set for this prefix.
     *
     * @param string              $prefix  The prefix
     * @param list<string>|string $paths   The PSR-0 root directories
     * @param bool                $prepend Whether to prepend the directories
     *
     * @return void
     */
    public function add($prefix, $paths, $prepend = false)
    {
        $paths = (array) $paths;
        if (!$prefix) {
            if ($prepend) {
                $this->fallbackDirsPsr0 = array_merge(
                    $paths,
                    $this->fallbackDirsPsr0
                );
            } else {
                $this->fallbackDirsPsr0 = array_merge(
                    $this->fallbackDirsPsr0,
                    $paths
                );
            }

            return;
        }

        $first = $prefix[0];
        if (!isset($this->prefixesPsr0[$first][$prefix])) {
            $this->prefixesPsr0[$first][$prefix] = $paths;

            return;
        }
        if ($prepend) {
            $this->prefixesPsr0[$first][$prefix] = array_merge(
                $paths,
                $this->prefixesPsr0[$first][$prefix]
            );
        } else {
            $this->prefixesPsr0[$first][$prefix] = array_merge(
                $this->prefixesPsr0[$first][$prefix],
                $paths
            );
        }
    }

    /**
     * Registers a set of PSR-4 directories for a given namespace, either
     * appending or prepending to the ones previously set for this namespace.
     *
     * @param string              $prefix  The prefix/namespace, with trailing '\\'
     * @param list<string>|string $paths   The PSR-4 base directories
     * @param bool                $prepend Whether to prepend the directories
     *
     * @throws \InvalidArgumentException
     *
     * @return void
     */
    public function addPsr4($prefix, $paths, $prepend = false)
    {
        $paths = (array) $paths;
        if (!$prefix) {
            // Register directories for the root namespace.
            if ($prepend) {
                $this->fallbackDirsPsr4 = array_merge(
                    $paths,
                    $this->fallbackDirsPsr4
                );
            } else {
                $this->fallbackDirsPsr4 = array_merge(
                    $this->fallbackDirsPsr4,
                    $paths
                );
            }
        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
            // Register directories for a new namespace.
            $length = strlen($prefix);
            if ('\\' !== $prefix[$length - 1]) {
                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
            }
            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
            $this->prefixDirsPsr4[$prefix] = $paths;
        } elseif ($prepend) {
            // Prepend directories for an already registered namespace.
            $this->prefixDirsPsr4[$prefix] = array_merge(
                $paths,
                $this->prefixDirsPsr4[$prefix]
            );
        } else {
            // Append directories for an already registered namespace.
            $this->prefixDirsPsr4[$prefix] = array_merge(
                $this->prefixDirsPsr4[$prefix],
                $paths
            );
        }
    }

    /**
     * Registers a set of PSR-0 directories for a given prefix,
     * replacing any others previously set for this prefix.
     *
     * @param string              $prefix The prefix
     * @param list<string>|string $paths  The PSR-0 base directories
     *
     * @return void
     */
    public function set($prefix, $paths)
    {
        if (!$prefix) {
            $this->fallbackDirsPsr0 = (array) $paths;
        } else {
            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
        }
    }

    /**
     * Registers a set of PSR-4 directories for a given namespace,
     * replacing any others previously set for this namespace.
     *
     * @param string              $prefix The prefix/namespace, with trailing '\\'
     * @param list<string>|string $paths  The PSR-4 base directories
     *
     * @throws \InvalidArgumentException
     *
     * @return void
     */
    public function setPsr4($prefix, $paths)
    {
        if (!$prefix) {
            $this->fallbackDirsPsr4 = (array) $paths;
        } else {
            $length = strlen($prefix);
            if ('\\' !== $prefix[$length - 1]) {
                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
            }
            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
            $this->prefixDirsPsr4[$prefix] = (array) $paths;
        }
    }

    /**
     * Turns on searching the include path for class files.
     *
     * @param bool $useIncludePath
     *
     * @return void
     */
    public function setUseIncludePath($useIncludePath)
    {
        $this->useIncludePath = $useIncludePath;
    }

    /**
     * Can be used to check if the autoloader uses the include path to check
     * for classes.
     *
     * @return bool
     */
    public function getUseIncludePath()
    {
        return $this->useIncludePath;
    }

    /**
     * Turns off searching the prefix and fallback directories for classes
     * that have not been registered with the class map.
     *
     * @param bool $classMapAuthoritative
     *
     * @return void
     */
    public function setClassMapAuthoritative($classMapAuthoritative)
    {
        $this->classMapAuthoritative = $classMapAuthoritative;
    }

    /**
     * Should class lookup fail if not found in the current class map?
     *
     * @return bool
     */
    public function isClassMapAuthoritative()
    {
        return $this->classMapAuthoritative;
    }

    /**
     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
     *
     * @param string|null $apcuPrefix
     *
     * @return void
     */
    public function setApcuPrefix($apcuPrefix)
    {
        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
    }

    /**
     * The APCu prefix in use, or null if APCu caching is not enabled.
     *
     * @return string|null
     */
    public function getApcuPrefix()
    {
        return $this->apcuPrefix;
    }

    /**
     * Registers this instance as an autoloader.
     *
     * @param bool $prepend Whether to prepend the autoloader or not
     *
     * @return void
     */
    public function register($prepend = false)
    {
        spl_autoload_register(array($this, 'loadClass'), true, $prepend);

        if (null === $this->vendorDir) {
            return;
        }

        if ($prepend) {
            self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;
        } else {
            unset(self::$registeredLoaders[$this->vendorDir]);
            self::$registeredLoaders[$this->vendorDir] = $this;
        }
    }

    /**
     * Unregisters this instance as an autoloader.
     *
     * @return void
     */
    public function unregister()
    {
        spl_autoload_unregister(array($this, 'loadClass'));

        if (null !== $this->vendorDir) {
            unset(self::$registeredLoaders[$this->vendorDir]);
        }
    }

    /**
     * Loads the given class or interface.
     *
     * @param  string    $class The name of the class
     * @return true|null True if loaded, null otherwise
     */
    public function loadClass($class)
    {
        if ($file = $this->findFile($class)) {
            $includeFile = self::$includeFile;
            $includeFile($file);

            return true;
        }

        return null;
    }

    /**
     * Finds the path to the file where the class is defined.
     *
     * @param string $class The name of the class
     *
     * @return string|false The path if found, false otherwise
     */
    public function findFile($class)
    {
        // class map lookup
        if (isset($this->classMap[$class])) {
            return $this->classMap[$class];
        }
        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
            return false;
        }
        if (null !== $this->apcuPrefix) {
            $file = apcu_fetch($this->apcuPrefix.$class, $hit);
            if ($hit) {
                return $file;
            }
        }

        $file = $this->findFileWithExtension($class, '.php');

        // Search for Hack files if we are running on HHVM
        if (false === $file && defined('HHVM_VERSION')) {
            $file = $this->findFileWithExtension($class, '.hh');
        }

        if (null !== $this->apcuPrefix) {
            apcu_add($this->apcuPrefix.$class, $file);
        }

        if (false === $file) {
            // Remember that this class does not exist.
            $this->missingClasses[$class] = true;
        }

        return $file;
    }

    /**
     * Returns the currently registered loaders keyed by their corresponding vendor directories.
     *
     * @return array<string, self>
     */
    public static function getRegisteredLoaders()
    {
        return self::$registeredLoaders;
    }

    /**
     * @param  string       $class
     * @param  string       $ext
     * @return string|false
     */
    private function findFileWithExtension($class, $ext)
    {
        // PSR-4 lookup
        $logicalPathPsr4 = strtr($class, '\\', DIRECTORY_SEPARATOR) . $ext;

        $first = $class[0];
        if (isset($this->prefixLengthsPsr4[$first])) {
            $subPath = $class;
            while (false !== $lastPos = strrpos($subPath, '\\')) {
                $subPath = substr($subPath, 0, $lastPos);
                $search = $subPath . '\\';
                if (isset($this->prefixDirsPsr4[$search])) {
                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
                    foreach ($this->prefixDirsPsr4[$search] as $dir) {
                        if (file_exists($file = $dir . $pathEnd)) {
                            return $file;
                        }
                    }
                }
            }
        }

        // PSR-4 fallback dirs
        foreach ($this->fallbackDirsPsr4 as $dir) {
            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
                return $file;
            }
        }

        // PSR-0 lookup
        if (false !== $pos = strrpos($class, '\\')) {
            // namespaced class name
            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)
                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);
        } else {
            // PEAR-like class name
            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;
        }

        if (isset($this->prefixesPsr0[$first])) {
            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
                if (0 === strpos($class, $prefix)) {
                    foreach ($dirs as $dir) {
                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                            return $file;
                        }
                    }
                }
            }
        }

        // PSR-0 fallback dirs
        foreach ($this->fallbackDirsPsr0 as $dir) {
            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                return $file;
            }
        }

        // PSR-0 include paths.
        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
            return $file;
        }

        return false;
    }

    /**
     * @return void
     */
    private static function initializeIncludeClosure()
    {
        if (self::$includeFile !== null) {
            return;
        }

        /**
         * Scope isolated include.
         *
         * Prevents access to $this/self from included files.
         *
         * @param  string $file
         * @return void
         */
        self::$includeFile = \Closure::bind(static function($file) {
            include $file;
        }, null, null);
    }
}

===== vendor/composer/installed.php =====
<?php return array(
    'root' => array(
        'name' => '__root__',
        'pretty_version' => 'dev-main',
        'version' => 'dev-main',
        'reference' => '251c2169a1e073846c4f51dcd0c671a2df7130f0',
        'type' => 'library',
        'install_path' => __DIR__ . '/../../',
        'aliases' => array(),
        'dev' => true,
    ),
    'versions' => array(
        '__root__' => array(
            'pretty_version' => 'dev-main',
            'version' => 'dev-main',
            'reference' => '251c2169a1e073846c4f51dcd0c671a2df7130f0',
            'type' => 'library',
            'install_path' => __DIR__ . '/../../',
            'aliases' => array(),
            'dev_requirement' => false,
        ),
        'phpmailer/phpmailer' => array(
            'pretty_version' => 'v6.11.1',
            'version' => '6.11.1.0',
            'reference' => 'd9e3b36b47f04b497a0164c5a20f92acb4593284',
            'type' => 'library',
            'install_path' => __DIR__ . '/../phpmailer/phpmailer',
            'aliases' => array(),
            'dev_requirement' => false,
        ),
    ),
);

===== vendor/composer/InstalledVersions.php =====
<?php

/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann <naderman@naderman.de>
 *     Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Composer;

use Composer\Autoload\ClassLoader;
use Composer\Semver\VersionParser;

/**
 * This class is copied in every Composer installed project and available to all
 *
 * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
 *
 * To require its presence, you can require `composer-runtime-api ^2.0`
 *
 * @final
 */
class InstalledVersions
{
    /**
     * @var mixed[]|null
     * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null
     */
    private static $installed;

    /**
     * @var bool|null
     */
    private static $canGetVendors;

    /**
     * @var array[]
     * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
     */
    private static $installedByVendor = array();

    /**
     * Returns a list of all package names which are present, either by being installed, replaced or provided
     *
     * @return string[]
     * @psalm-return list<string>
     */
    public static function getInstalledPackages()
    {
        $packages = array();
        foreach (self::getInstalled() as $installed) {
            $packages[] = array_keys($installed['versions']);
        }

        if (1 === \count($packages)) {
            return $packages[0];
        }

        return array_keys(array_flip(\call_user_func_array('array_merge', $packages)));
    }

    /**
     * Returns a list of all package names with a specific type e.g. 'library'
     *
     * @param  string   $type
     * @return string[]
     * @psalm-return list<string>
     */
    public static function getInstalledPackagesByType($type)
    {
        $packagesByType = array();

        foreach (self::getInstalled() as $installed) {
            foreach ($installed['versions'] as $name => $package) {
                if (isset($package['type']) && $package['type'] === $type) {
                    $packagesByType[] = $name;
                }
            }
        }

        return $packagesByType;
    }

    /**
     * Checks whether the given package is installed
     *
     * This also returns true if the package name is provided or replaced by another package
     *
     * @param  string $packageName
     * @param  bool   $includeDevRequirements
     * @return bool
     */
    public static function isInstalled($packageName, $includeDevRequirements = true)
    {
        foreach (self::getInstalled() as $installed) {
            if (isset($installed['versions'][$packageName])) {
                return $includeDevRequirements || !isset($installed['versions'][$packageName]['dev_requirement']) || $installed['versions'][$packageName]['dev_requirement'] === false;
            }
        }

        return false;
    }

    /**
     * Checks whether the given package satisfies a version constraint
     *
     * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
     *
     *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
     *
     * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
     * @param  string        $packageName
     * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
     * @return bool
     */
    public static function satisfies(VersionParser $parser, $packageName, $constraint)
    {
        $constraint = $parser->parseConstraints((string) $constraint);
        $provided = $parser->parseConstraints(self::getVersionRanges($packageName));

        return $provided->matches($constraint);
    }

    /**
     * Returns a version constraint representing all the range(s) which are installed for a given package
     *
     * It is easier to use this via isInstalled() with the $constraint argument if you need to check
     * whether a given version of a package is installed, and not just whether it exists
     *
     * @param  string $packageName
     * @return string Version constraint usable with composer/semver
     */
    public static function getVersionRanges($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            $ranges = array();
            if (isset($installed['versions'][$packageName]['pretty_version'])) {
                $ranges[] = $installed['versions'][$packageName]['pretty_version'];
            }
            if (array_key_exists('aliases', $installed['versions'][$packageName])) {
                $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);
            }
            if (array_key_exists('replaced', $installed['versions'][$packageName])) {
                $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);
            }
            if (array_key_exists('provided', $installed['versions'][$packageName])) {
                $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);
            }

            return implode(' || ', $ranges);
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
     */
    public static function getVersion($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            if (!isset($installed['versions'][$packageName]['version'])) {
                return null;
            }

            return $installed['versions'][$packageName]['version'];
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
     */
    public static function getPrettyVersion($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            if (!isset($installed['versions'][$packageName]['pretty_version'])) {
                return null;
            }

            return $installed['versions'][$packageName]['pretty_version'];
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
     */
    public static function getReference($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            if (!isset($installed['versions'][$packageName]['reference'])) {
                return null;
            }

            return $installed['versions'][$packageName]['reference'];
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
     */
    public static function getInstallPath($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @return array
     * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}
     */
    public static function getRootPackage()
    {
        $installed = self::getInstalled();

        return $installed[0]['root'];
    }

    /**
     * Returns the raw installed.php data for custom implementations
     *
     * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
     * @return array[]
     * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}
     */
    public static function getRawData()
    {
        @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);

        if (null === self::$installed) {
            // only require the installed.php file if this file is loaded from its dumped location,
            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
            if (substr(__DIR__, -8, 1) !== 'C') {
                self::$installed = include __DIR__ . '/installed.php';
            } else {
                self::$installed = array();
            }
        }

        return self::$installed;
    }

    /**
     * Returns the raw data of all installed.php which are currently loaded for custom implementations
     *
     * @return array[]
     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
     */
    public static function getAllRawData()
    {
        return self::getInstalled();
    }

    /**
     * Lets you reload the static array from another file
     *
     * This is only useful for complex integrations in which a project needs to use
     * this class but then also needs to execute another project's autoloader in process,
     * and wants to ensure both projects have access to their version of installed.php.
     *
     * A typical case would be PHPUnit, where it would need to make sure it reads all
     * the data it needs from this class, then call reload() with
     * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
     * the project in which it runs can then also use this class safely, without
     * interference between PHPUnit's dependencies and the project's dependencies.
     *
     * @param  array[] $data A vendor/composer/installed.php data set
     * @return void
     *
     * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data
     */
    public static function reload($data)
    {
        self::$installed = $data;
        self::$installedByVendor = array();
    }

    /**
     * @return array[]
     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
     */
    private static function getInstalled()
    {
        if (null === self::$canGetVendors) {
            self::$canGetVendors = method_exists('Composer\Autoload\ClassLoader', 'getRegisteredLoaders');
        }

        $installed = array();

        if (self::$canGetVendors) {
            foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {
                if (isset(self::$installedByVendor[$vendorDir])) {
                    $installed[] = self::$installedByVendor[$vendorDir];
                } elseif (is_file($vendorDir.'/composer/installed.php')) {
                    /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
                    $required = require $vendorDir.'/composer/installed.php';
                    $installed[] = self::$installedByVendor[$vendorDir] = $required;
                    if (null === self::$installed && strtr($vendorDir.'/composer', '\\', '/') === strtr(__DIR__, '\\', '/')) {
                        self::$installed = $installed[count($installed) - 1];
                    }
                }
            }
        }

        if (null === self::$installed) {
            // only require the installed.php file if this file is loaded from its dumped location,
            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
            if (substr(__DIR__, -8, 1) !== 'C') {
                /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
                $required = require __DIR__ . '/installed.php';
                self::$installed = $required;
            } else {
                self::$installed = array();
            }
        }

        if (self::$installed !== array()) {
            $installed[] = self::$installed;
        }

        return $installed;
    }
}

===== vendor/composer/platform_check.php =====
<?php

// platform_check.php @generated by Composer

$issues = array();

if (!(PHP_VERSION_ID >= 50500)) {
    $issues[] = 'Your Composer dependencies require a PHP version ">= 5.5.0". You are running ' . PHP_VERSION . '.';
}

if ($issues) {
    if (!headers_sent()) {
        header('HTTP/1.1 500 Internal Server Error');
    }
    if (!ini_get('display_errors')) {
        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
            fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);
        } elseif (!headers_sent()) {
            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;
        }
    }
    trigger_error(
        'Composer detected issues in your platform: ' . implode(' ', $issues),
        E_USER_ERROR
    );
}

===== views/auth/forgot_password.php =====
<main class="container py-5">
    <h1 class="text-center mb-4">Mot de passe oublié</h1>

    <?php if (!empty($error)): ?>
        <div class="alert alert-danger"><?= htmlspecialchars($error) ?></div>
    <?php elseif (!empty($success)): ?>
        <div class="alert alert-success"><?= $success ?></div>
    <?php endif; ?>

    <form method="post" class="card p-4 shadow-sm">
        <label for="email" class="form-label">Adresse e-mail</label>
        <input type="email" name="email" id="email" class="form-control mb-3" required>
        <button type="submit" class="btn btn-primary w-100">Réinitialiser le mot de passe</button>
    </form>
</main>

===== views/auth/login.php =====
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="EnergyDash - votre tableau de bord intelligent pour gérer vos données énergétiques.">
    <link rel="apple-touch-icon" sizes="180x180" href="<?= BASE_URL ?>/assets/images/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="<?= BASE_URL ?>/assets/images/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="<?= BASE_URL ?>/assets/images/favicon/favicon-16x16.png">
    <link rel="shortcut icon" href="<?= BASE_URL ?>/assets/images/favicon/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="<?= BASE_URL ?>/assets/bootstrap/css/bootstrap.min.css">
    <title><?= htmlspecialchars($title ?? 'Connexion') ?></title>
    <style>
        body { background-color: #F8F4F1; }
        button { background-color: #7749f8 !important; border: 0 !important; }
        .card { background-color: #F8F4F1; }
        .purple { color: #9945E3 !important; }
        
    </style>
</head>
<body>
    <?php if (isset($_SESSION['flash'])): ?>
        <div class="alert alert-success position-absolute container-fluid top-0 start-50 translate-middle-x z-1 text-center" role="alert">
            <?= htmlspecialchars($_SESSION['flash']) ?>
        </div>
        <?php unset($_SESSION['flash']); ?>
    <?php endif; ?>

    <section>
        <?php if (isset($error)): ?>
            <div class="alert alert-danger position-absolute container-fluid top-0 start-50 translate-middle-x z-1" role="alert">
                <?= htmlspecialchars($error) ?>
            </div>
        <?php endif; ?>
    </section>

    <div class="container">
        <div class="row justify-content-center align-items-center" style="min-height: 100vh;">
            <div class="col-10 col-xl-5 col-sm-8 col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <form action="<?= BASE_URL ?>/login" method="post">
                            <h2 class="text-center fw-bold p-3">Connexion</h2>

                            <div class="ps-5 pe-5 mt-3">
                                <label for="email" class="form-label">Adresse mail *</label>
                                <input type="email" class="form-control" id="email" name="email" placeholder="john.doe@gmail.com">
                            </div>

                            <div class="ps-5 pe-5 mt-3">
                                <label for="password" class="form-label">Mot de passe *</label>
                                <input type="password" id="password" class="form-control" name="password" placeholder="Mot de passe">
                            </div>

                            <div class="ps-5 pe-5 pt-4">
                                <button type="submit" class="btn btn-primary w-100 p-3 fw-semibold form-button">
                                    Se connecter
                                </button>
                            </div>
                            
                            <div class="text-center mt-3">
                                <a href="<?= BASE_URL ?>/forgot-password" class="text-decoration-none purple fw-semibold">
                                    Mot de passe oublié ?
                                </a>
                            </div>

                        </form>
                    </div>
                    <div class="card-footer text-center p-3">
                        <span class="fw-regular text-secondary">Pas de compte ? </span>
                        <a class="fw-bold link-underline link-underline-opacity-0 purple" href="<?= BASE_URL ?>/register">S'inscrire</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="<?= BASE_URL ?>/assets/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script>
    document.querySelector('form').addEventListener('submit', function() {
        const btn = document.querySelector('.form-button');
        btn.innerHTML = '<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';
        btn.disabled = true;
    });
    </script>
</body>
</html>

===== views/auth/register.php =====
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="EnergyDash - votre tableau de bord intelligent pour gérer vos données énergétiques.">
    <link rel="apple-touch-icon" sizes="180x180" href="<?= BASE_URL ?>/assets/images/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="<?= BASE_URL ?>/assets/images/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="<?= BASE_URL ?>/assets/images/favicon/favicon-16x16.png">
    <link rel="shortcut icon" href="<?= BASE_URL ?>/assets/images/favicon/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="<?= BASE_URL ?>/assets/bootstrap/css/bootstrap.min.css">
    <title><?= htmlspecialchars($title ?? 'Inscription') ?></title>
    <style>
        body { background-color: #F8F4F1; }
        button { background-color: #7749f8 !important; border: 0 !important; }
        .card { background-color: #F8F4F1; }
        .purple { color: #9945E3 !important; }
    </style>
</head>
<body>
    <?php if (isset($error)): ?>
        <div class="alert alert-danger position-absolute container-fluid top-0 start-50 translate-middle-x z-1" role="alert">
            <?= htmlspecialchars($error) ?>
        </div>
    <?php endif; ?>

    <div class="container">
        <div class="row justify-content-center align-items-center" style="min-height: 100vh;">
            <div class="col-10 col-xl-5 col-sm-8 col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <form action="<?= BASE_URL ?>/register" method="post">
                            <h2 class="text-center fw-bold p-3">Inscription</h2>

                            <div class="ps-5 pe-5 mt-3">
                                <label for="first_name" class="form-label">Prénom *</label>
                                <input type="text" class="form-control" id="first_name" name="first_name" value="<?= htmlspecialchars($_POST['first_name'] ?? '') ?>" placeholder="John" required>
                            </div>
                            <div class="ps-5 pe-5 mt-3">
                                <label for="last_name" class="form-label">Nom *</label>
                                <input type="text" class="form-control" id="last_name" name="last_name" value="<?= htmlspecialchars($_POST['last_name'] ?? '') ?>" placeholder="Doe" requied>
                            </div>
                            <div class="ps-5 pe-5 mt-3">
                                <label for="email" class="form-label">Adresse mail *</label>
                                <input type="email" class="form-control" id="email" name="email" value="<?= htmlspecialchars($_POST['email'] ?? '') ?>" placeholder="john.doe@gmail.com" required>
                            </div>
                            <div class="ps-5 pe-5 mt-3">
                                <label for="password" class="form-label">Mot de passe *</label>
                                <input type="password" id="password" class="form-control" name="password" placeholder="Mot de passe" required minlenght="8">
                            </div>
                            <div class="ps-5 pe-5 mt-3">
                                <label for="confirm_password">Confirmer le mot de passe *</label>
                                <input type="password" id="confirm_password" class="form-control" name="confirm_password" required minlenght="8">
                                <div class="form-text">Le mot de passe doit contenir au moins 8 caractères, dont une majuscule, une minuscule, un chiffre et un symbole.</div>
                            </div>
                            <div class="ps-5 pe-5 mt-3 mb-4">
                                <button type="submit" class="btn btn-primary w-100 p-3 fw-semibold form-button">
                                    S'inscrire
                                </button>
                            </div>
                            
                        </form>
                    </div>
                    <div class="card-footer text-center p-3">
                        <span class="fw-regular text-secondary">déjà inscrit ? </span>
                        <a class="fw-bold link-underline link-underline-opacity-0 purple" href="<?= BASE_URL ?>/login">Se connecter</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="<?= BASE_URL ?>/assets/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script>
    document.querySelector('form').addEventListener('submit', function() {
        const btn = document.querySelector('.form-button');
        btn.innerHTML = '<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';
        btn.disabled = true;
    });
    </script>
</body>
</html>

===== views/auth/reset_password.php =====
<main class="container py-5">
    <h1 class="text-center mb-4">Réinitialiser votre mot de passe</h1>

    <?php if (!empty($error)): ?>
        <div class="alert alert-danger"><?= htmlspecialchars($error) ?></div>
    <?php endif; ?>

    <form method="post" class="card p-4 shadow-sm">
        <input type="hidden" name="token" value="<?= htmlspecialchars($token) ?>">
        <label for="password" class="form-label">Nouveau mot de passe</label>
        <input type="password" name="password" id="password" class="form-control mb-3" required>

        <label for="confirm_password" class="form-label">Confirmer le mot de passe</label>
        <input type="password" name="confirm_password" id="confirm_password" class="form-control mb-4" required>

        <button type="submit" class="btn btn-primary w-100">Enregistrer le nouveau mot de passe</button>
    </form>
</main>

===== views/dashboard/dashboard.php =====
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="EnergyDash - votre tableau de bord intelligent pour gérer vos données énergétiques.">
    <title><?= htmlspecialchars($title ?? 'Dashboard') ?></title>
    <link rel="apple-touch-icon" sizes="180x180" href="<?= BASE_URL ?>/assets/images/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="<?= BASE_URL ?>/assets/images/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="<?= BASE_URL ?>/assets/images/favicon/favicon-16x16.png">
    <link rel="shortcut icon" href="<?= BASE_URL ?>/assets/images/favicon/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="<?= BASE_URL ?>/assets/bootstrap/css/bootstrap.min.css">
</head>
<body class="container py-5">
    <h1>Tableau de bord</h1>
    <p class="text-success">Bienvenue, vous êtes connecté !</p>
    <a class="btn btn-danger" href="<?= BASE_URL ?>/logout">Déconnexion</a>

    <script src="<?= BASE_URL ?>/assets/bootstrap/js/bootstrap.bundle.min.js"></script>
</body>
</html>

===== views/errors/404.php =====
<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8">
  <title>404</title>
  <link rel="apple-touch-icon" sizes="180x180" href="<?= BASE_URL ?>/assets/images/favicon/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="<?= BASE_URL ?>/assets/images/favicon/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="<?= BASE_URL ?>/assets/images/favicon/favicon-16x16.png">
  <link rel="shortcut icon" href="<?= BASE_URL ?>/assets/images/favicon/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="<?= BASE_URL ?>/assets/bootstrap/css/bootstrap.min.css">
</head>
<body class="container py-5">
  <h1 class="display-5">Page non trouvée</h1>
  <p class="text-muted">La page demandée n'existe pas.</p>
  <a class="btn btn-primary" href="<?= BASE_URL ?>/">Retour à l'accueil</a>
</body>
</html>

===== views/home/index.php =====

<main class="d-flex justify-content-center align-items-start" style="min-height:70vh;">
    <div class="text-center">
        <h1 class="display-1 fw-bold lh-1">Bienvenue dans<br>votre tableau de bord</h1>
    </div>
</main>
<script src="<?= BASE_URL ?>/assets/bootstrap/js/bootstrap.bundle.min.js"></script>


===== views/legal/mentions.php =====
<main class="container py-5">
    <h1 class="text-center mb-5 fw-bold">Mentions légales</h1>

    <section class="mb-5">
        <h2 class="h4 text-primary">Éditeur du site</h2>
        <p>
            <strong>Noms :</strong> Bougherara Adam, Clot-Godard Kenji, Haddad Mohamed-Amine, Lepape Lucas, Mailhe Gustin<br>
            <strong>Adresse :</strong> 413 Av. Gaston Berger, 13100 Aix-en-Provence<br>
            <strong>Email :</strong> energydash@gmail.com<br>
        </p>
    </section>

    <section class="mb-5">
        <h2 class="h4 text-primary">Directeur de la publication</h2>
        <p>Bougherara Adam — Étudiant responsable du projet EnergyDash</p>
    </section>

    <section class="mb-5">
        <h2 class="h4 text-primary">Hébergement</h2>
        <p>
            Hébergeur : <strong>alwaysdata</strong><br>
            Forme juridique : SARL au capital de 5 000 €<br>
            Adresse : 62 rue Tiquetonne, 75002 Paris, France<br>
            Téléphone : +33 (0)1 84 16 23 40<br>
            Site web : <a href="https://www.alwaysdata.com/fr/" target="_blank" rel="noopener noreferrer">
            www.alwaysdata.com
            </a><br>
            SIRET : 492 893 490 00045 — RCS Paris
        </p>
        <p>
            Ce site est hébergé par <strong>alwaysdata</strong> dans le cadre d’un projet universitaire à
            l’IUT d’Aix-Marseille. Il s’agit d’un site pédagogique et non commercial.
        </p>
    </section>

    <section class="mb-5">
        <h2 class="h4 text-primary">Objet du site</h2>
        <p>
            EnergyDash est un tableau de bord web permettant la visualisation et la gestion
            de données énergétiques. Ce site a été développé à des fins pédagogiques dans le cadre
            du cours de Programmation Web côté serveur (S3 – IUT d’Aix-Marseille).
        </p>
    </section>


    <section class="mb-5">
        <h2 class="h4 text-primary">Propriété intellectuelle</h2>
        <p>
            Le code source, les textes et images de ce site sont protégés par le droit d’auteur.
            Toute reproduction ou réutilisation est interdite sans autorisation des auteurs.
        </p>
    </section>

    <section class="mb-5">
        <h2 class="h4 text-primary">Données personnelles</h2>
        <p>
            Les données collectées (nom, prénom, email) servent uniquement à la gestion des comptes utilisateurs.
            Aucune information n’est transmise à des tiers.  
            Les mots de passe sont chiffrés avant enregistrement conformément aux recommandations de l’<abbr title="Open Web Application Security Project">OWASP</abbr>.
        </p>
    </section>

    <section class="mb-5">
        <h2 class="h4 text-primary">Crédits</h2>
        <p>
            Site développé avec <strong>PHP 8 / Bootstrap 5</strong> dans le cadre du projet universitaire
            <em>EnergyDash</em>.  
            © <?= date('Y') ?> EnergyDash — Tous droits réservés.
        </p>
    </section>

    <div class="text-center mt-5">
        <a href="<?= BASE_URL ?>/" class="btn btn-outline-primary">Retour à l’accueil</a>
    </div>
</main>

===== views/shared/footer.php =====
<footer class="py-2 mt-auto mx-3 mx-md-4 mb-2" style="background: #7118BF; border-radius:12px;">
  <div class="container-fluid px-2 px-md-3">
    <nav aria-label="Footer" class="mb-2">
      <ul class="nav justify-content-center border-bottom pb-2 mb-2">
        <li class="nav-item"><a class="nav-link text-white px-2" href="<?= BASE_URL ?>/">Accueil</a></li>
        <li class="nav-item"><a class="nav-link text-white px-2" href="<?= BASE_URL ?>/login">Connexion</a></li>
        <li class="nav-item"><a class="nav-link text-white px-2" href="<?= BASE_URL ?>/register">Inscription</a></li>
        <li class="nav-item"><a class="nav-link text-white px-2" href="<?= BASE_URL ?>/dashboard">Dashboard</a></li>
        <li class="nav-item"><a class="nav-link text-white px-2" href="<?= BASE_URL ?>/mentions-legales">Mentions légales</a></li>
      </ul>
    </nav>

    <div class="d-flex flex-column flex-md-row justify-content-center align-items-center gap-2">
      <p class="mb-0 small text-white">© <?= date('Y') ?> EnergyDash — Tous droits réservés</p>
    </div>
  </div>
</footer>
===== views/shared/layout.php =====
<!doctype html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="EnergyDash - votre tableau de bord intelligent pour gérer vos données énergétiques.">
    <title><?= htmlspecialchars($title ?? 'Accueil') ?></title>
    <link rel="apple-touch-icon" sizes="180x180" href="<?= BASE_URL ?>/assets/images/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="<?= BASE_URL ?>/assets/images/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="<?= BASE_URL ?>/assets/images/favicon/favicon-16x16.png">
    <link rel="shortcut icon" href="<?= BASE_URL ?>/assets/images/favicon/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="<?= BASE_URL ?>/assets/bootstrap/css/bootstrap.min.css">
    <style>
        body { background-color: #F8F4F1; }
        .btn-primary { background-color: #7749f8 !important; border-color: #7749f8 !important; }
        .btn-outline-primary { color: #7749f8 !important; border: 1px solid #7749f8 !important; }
        .btn-outline-primary:hover { background-color: #7749f8 !important; color: white !important; }
        .btn-primary:hover { background-color: #7749f8 !important; }
        button { background-color: #7749f8 !important; border: 0 !important; }
        .card { background-color: #F8F4F1; }
        .purple { color: #9945E3 !important; }
    </style>
</head>
<body class="container-fluid">
<?php
include $navbar;
include $body;
include $footer;
?>
</body>
</html>
===== views/shared/navbar.php =====
<?php
?>
<nav class="navbar navbar-expand-md">
  <div class="container-fluid">
    <a class="navbar-brand fw-semibold text-body-secondary" href="<?= BASE_URL ?>/">EnergyDash</a>

    <div class="d-flex align-items-center">
    <a class="btn btn-outline-primary pe-3 ps-3 fw-bold me-3" href="<?= BASE_URL ?>/login">Se connecter</a>
    <a class="btn btn-primary pe-4 ps-4 fw-bold" href="<?= BASE_URL ?>/register">S'inscrire</a>
    </div>
  </div>
</nav>  
